spring:
  application:
    name: components-example-starters-cloud-feign
  profiles:
    active: local
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 1000
            readTimeout: 12000
      #      httpclient:
      #        max-connections: 200
      #        max-connections-per-route: 50
      ok-http:
        enabled: true
        log-info-level-for-request: true
#    loadbalancer:
#      clients:
#        default:

server:
  port: 8080
  tomcat:
    threads:
      min-spare: 10
      max: 200
    connection-timeout: 15000
    #    accept-count: 4096
    #    max-connections: 65000
    mbeanregistry:
      enabled: true
    relaxed-path-chars:
      - '{'
      - '}'
      - '['
      - ']'
      - '|'
      - '<'
      - '>'
      - '\'
      - '^'
      - '`'
      - '"'
    relaxed-query-chars:
      - '{'
      - '}'
      - '['
      - ']'
      - '|'
      - '<'
      - '>'
      - '\'
      - '^'
      - '`'
      - '"'
  http2:
    enabled: true

logging:
  config: classpath:logConfig/log4j2.xml

ribbon:
  # 随机
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
  # 轮询
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
  # 先按照RoundRobinRule（轮询）策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule
  # 响应时间权重
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
  # 先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule
  # 先过滤掉由于多次访问故障而处于断路器状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.AvailabilityFilteringRule
  # 根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越大。刚启动时如果统计信息不足，则使用RoundRobinRule（轮询）策略，等统计信息足够，会切换到WeightedResponseTimeRule
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
  # 复合判断Server所在区域的性能和Server的可用性选择服务器
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule
  ConnectTimeout: 1000 #请求连接超时时间
  ReadTimeout: 3000 #请求处理的超时时间
  OkToRetryOnAllOperations: true #对所有请求都进行重试
  MaxAutoRetriesNextServer: 2 #切换实例的重试次数
# 服务名
xxxxxService:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
    ConnectTimeout: 1000 #请求连接超时时间
    ReadTimeout: 3000 #请求处理的超时时间
    OkToRetryOnAllOperations: true #对所有请求都进行重试
    MaxAutoRetriesNextServer: 2 #切换实例的重试次数

skrstop:
  feign:
    config:
      enable-http2: false
      scan-package: com.skrstop.framework.components.example.starters.cloud.feign.api
      stop-auto-remove-global-response: false
      gzip-compress: false
  response:
    config:
      ## 该选项为false是，必须设置 feign.config.stop-auto-remove-global-response = true
      ## 【如果同时使用了两个包，程序会做自动设置feign.config.stop-auto-remove-global-response = true】
      support-feign: true